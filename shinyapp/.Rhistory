library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(GGally)
library(ggplot2)
library(ggplot2)
library(GGally)
summary(mtcars)
str(mtcars)
mtcars$am <- factor (mtcars$am,labels=c('Automatic','Manual'))
boxplot(mpg ~ am,data=mtcars,fill=factor(mtcars$am))
ggplot(mtcars,aes(x=am,y=mpg)) + geom_boxplot()
ggplot(mtcars,aes(x=am,y=mpg)) + geom_boxplot()
summary(mtcars)
str(mtcars)
mtcars$am <- factor (mtcars$am,labels=c('Automatic','Manual'))
#boxplot(mpg ~ am,data=mtcars,fill=factor(mtcars$am))
ggplot(mtcars,aes(x=am,y=mpg)) + geom_boxplot(aes(col=am))
ggplot(mtcars,aes(x=am,y=mpg)) + geom_boxplot(aes(col=am))
ggplot(mtcars,aes(x=am,y=mpg)) + geom_boxplot(aes(fill=am)) +
labs (title='Plot showing mpg by manual or automatic',
y = 'mile per gallon',x='car type')
ggplot(mtcars,aes(x=am,y=mpg)) + geom_boxplot(aes(fill=am)) +
labs (title='Plot showing mpg by manual or automatic',
y = 'mile per gallon',x='car type')
ggplot(mtcars,aes(x=am,y=mpg)) + geom_point(aes(fill=am)) +
labs (title='Plot showing mpg by manual or automatic',
y = 'mile per gallon',x='car type')
ggplot(mtcars,aes(x=sam,y=mpg)) + geom_boxplot(aes(fill=sam)) +
labs (title='Plot showing mpg by manual or automatic',
y = 'mile per gallon',x='car type')
mtcars$sam <- factor (mtcars$am,labels=c('Automatic','Manual'))
ggplot(mtcars,aes(x=sam,y=mpg)) + geom_boxplot(aes(fill=sam)) +
labs (title='Plot showing mpg by manual or automatic',
y = 'mile per gallon',x='car type')
ggplot(mtcars,aes(x=sam,y=mpg)) + geom_boxplot(aes(fill=sam),varwidth=T) +
labs (title='Plot showing mpg by manual or automatic',
y = 'mile per gallon',x='car type')
mtcars$am_factor <- factor (mtcars$am,labels=c('Automatic','Manual'))
ggplot(mtcars,aes(x=am_factor,y=mpg)) +
geom_boxplot(aes(fill=am_factor)) +
geom_dotplot(binaxis='y',stackdir='center',dotsize=.5,fill='red') +
labs (title='MPG by drive type: manual or automatic',y = 'Miles per gallon',x='Drive type')
ggplot(mtcars,aes(x=am_factor,y=mpg)) +
geom_boxplot(aes(fill=am_factor),varwidth=T) +
geom_dotplot(binaxis='y',stackdir='center',dotsize=.5,fill='red') +
labs (title='MPG by drive type: manual or automatic',y = 'Miles per gallon',x='Drive type')
ggplot(mtcars,aes(x=am_factor,y=mpg)) +
geom_boxplot(aes(fill=am_factor)) +
geom_dotplot(binaxis='y',stackdir='center',dotsize=.5,fill='red',binwidth=25) +
labs (title='MPG by drive type: manual or automatic',y = 'Miles per gallon',x='Drive type')
ggplot(mtcars,aes(x=am_factor,y=mpg)) +
geom_boxplot(aes(fill=am_factor)) +
geom_dotplot(binaxis='y',stackdir='center',dotsize=.5,fill='red',binwidth=3) +
labs (title='MPG by drive type: manual or automatic',y = 'Miles per gallon',x='Drive type')
ggplot(mtcars,aes(x=am_factor,y=mpg)) +
geom_boxplot(aes(fill=am_factor)) +
geom_dotplot(binaxis='y',stackdir='center',dotsize=.5,fill='red',binwidth=1) +
labs (title='MPG by drive type: manual or automatic',y = 'Miles per gallon',x='Drive type')
ggplot(mtcars,aes(x=am_factor,y=mpg)) +
geom_boxplot(aes(fill=am_factor)) +
geom_dotplot(binaxis='y',stackdir='center',dotsize=.5,fill='black') +
labs (title='MPG by drive type: manual or automatic',y = 'Miles per gallon',x='Drive type')
theme_set(theme_classic())
summary(mtcars)
str(mtcars)
mtcars$am_factor <- factor (mtcars$am,labels=c('Automatic','Manual'))
ggplot(mtcars,aes(x=am_factor,y=mpg)) +
geom_boxplot(aes(fill=am_factor)) +
geom_dotplot(binaxis='y',stackdir='center',dotsize=.5,fill='black') +
labs (title='MPG by drive type: manual or automatic',y = 'Miles per gallon',x='Drive type')
mtcars$am_factor <- factor (mtcars$am,labels=c('Automatic','Manual'))
ggplot(mtcars,aes(x=am_factor,y=mpg)) +
geom_boxplot(aes(fill=am_factor)) +
geom_dotplot(binaxis='y',stackdir='center',dotsize=.5,fill='black') +
labs (title='MPG by drive type: manual or automatic',y = 'Miles per
gallon',x='Drive type') +
theme *axis.text=x=element.text(angle=65,vjust=0.6))
ggplot(mtcars,aes(x=am_factor,y=mpg)) +
geom_boxplot(aes(fill=am_factor)) +
geom_dotplot(binaxis='y',stackdir='center',dotsize=.5,fill='black') +
labs (title='MPG by drive type: manual or automatic',y = 'Miles per
gallon',x='Drive type') +
theme (axis.text=x=element.text(angle=65,vjust=0.6))
ggplot(mtcars,aes(x=am_factor,y=mpg)) +
geom_boxplot(aes(fill=am_factor)) +
geom_dotplot(binaxis='y',stackdir='center',dotsize=.5,fill='black') +
labs (title='MPG by drive type: manual or automatic',y = 'Miles per
gallon',x='Drive type') +
theme (axis.text.x=element.text(angle=65,vjust=0.6))
ggplot(mtcars,aes(x=am_factor,y=mpg)) +
geom_boxplot(aes(fill=am_factor)) +
geom_dotplot(binaxis='y',stackdir='center',dotsize=.5,fill='black') +
labs (title='MPG by drive type: manual or automatic',y = 'Miles per
gallon',x='Drive type') +
theme (axis.text.x=element_text(angle=65,vjust=0.6))
ggplot(mtcars,aes(x=am_factor,y=mpg)) + geom_violin() +
#  geom_boxplot(aes(fill=am_factor)) +
geom_dotplot(binaxis='y',stackdir='center',dotsize=.5,fill='black') +
labs (title='MPG by drive type: manual or automatic',y = 'Miles per
gallon',x='Drive type')
ggplot(mtcars,aes(x=am_factor,y=mpg)) + geom_violin(aes(fill=am_factor)) +
#  geom_boxplot(aes(fill=am_factor)) +
geom_dotplot(binaxis='y',stackdir='center',dotsize=.5,fill='black') +
labs (title='MPG by drive type: manual or automatic',y = 'Miles per
gallon',x='Drive type')
manual <- subset(mtcars,select=mpg,am==0)
auto   <- subset(mtcars,select=mpg,am==1)
t.test(manual,auto)
manual <- subset(mtcars,select=mpg,am=='manual')
auto   <- subset(mtcars,select=mpg,am=='automatic')
t.test(manual,auto)
manual
str(mtcars)
manual <- subset(mtcars,select=mpg,am=='Manual')
auto   <- subset(mtcars,select=mpg,am=='Automatic')
t.test(manual,auto)
fit_simple <- lm(mpg ~ am,mtcars)
summary(fit_simple)
?stepAIC
data(mtcars)
library(kernlab)
install.packages('kernlab')
library(kernlab)
data(spam)
smallSpam <- spam[sample(dim(spam)[1],size=10),]
sample(dim(spam))
dim(spam)
sample(dim(spam)[1],size=10)
smallSpam <- spam[sample(dim(spam)[1],size=10),]
smallSpam
head(spam)
names(spam)
spamLabel <- (smallSpam$type == 'spam')
spamLabel
spamLabel <- (smallSpam$type == 'spam')*1
spamLabel
spamLabel <- (smallSpam$type == 'spam')*1 + 1
spamLabel
data(mtcars)
t.test(mpg~am)
rule <- function (x) {
prediction <- rep(NA,length(x))
prediction[x > 2] <- 'spam'
prediction [x < 2.4] <- 'nonspam'
prediction [(x >= 2.4 & x <=2.7)] <- 'spam'
return(prediction)
}
table(rule(smallSpam$capitalAve),smallSpam$type)
rule(smallSpam$capitalAve)
smallSpam$type
table(rule(spam$capitalAve),spam$type)
sum(rule(spam$capitalAve) == spam$type)
library(ISLR)
install.packages(ISLR)
install.packages('ISLR')
library(ISLR)
data("Wage")
str(wage)
ls()
str('wage')
str(Wage)
qplot(Wage$wage,Wage$education)
library(ggplot2)
featurePlot(x=Wage,y=Wage$wage,plot='pairs')
library(caret)
featurePlot(x=Wage,y=Wage$wage,plot='pairs')
install.packages('caret')
library(caret)
featurePlot(x=Wage,y=Wage$wage,plot='pairs')
featurePlot(x=Wage,y=Wage$wage,plot='pairs')
?featurePlot
featurePlot(x=Wage$education,y=Wage$wage,plot='pairs')
?featurePlot
featurePlot(x=Wage$education,y=Wage$wage,plot='ellipse')
featurePlot(x=Wage$education,y=Wage$wage,plot='strip')
q(x=Wage$education,y=Wage$wage)
q(x=Wage$Education,y=Wage$wage)
q(x=Wage$age,y=Wage$wage)
q(x=Wage$age,y=Wage$wage,data=Wage)
qplot(x=Wage$age,y=Wage$wage,data=Wage)
qplot(x=Wage$age,y=Wage$wage,data=Wage,color=education)
qplot(x=Wage$age,y=Wage$wage,data=Wage,color=education)
qplot(x=Wage$age,y=Wage$wage,data=Wage,color=education) + geom_smooth()
library(Hmisc)
cutwage <- cut2(Wage$wage,g=3)
table(cutwage)
?cut2
qplot(cutwage,data=Wage)
qplot(cutwage,data=Wage),geom=c('boxplot')
qplot(cutwage,data=Wage,geom=c('boxplot')
)
table(cutWage,Wage$jobclass)
table(cutwage,Wage$jobclass)
prop.table(table(cutwage,Wage$jobclass))
margin.table(table(cutwage,Wage$jobclass))
margin(prop.table(table(cutwage,Wage$jobclass)))
qplot(wage,color=Education,data=Wage,geom='density')
qplot(wage,color=education,data=Wage,geom='density')
args(list)
args(lm)
sys.envir()
envsys()
env.sys()
object.size(lm)
ls()
rm(list=ls())
ls()
qplot(wage,color=Education,data=Wage,geom='density')
qplot(wage,color=Education,data=Wage,geom='density')
ls()
qplot(wage,color=Education,data=Wage,geom='density')
datamtcars
data(mtcars)
mtcars(selectNA)
quantile(mtcars$mpg)
mtcars[selectNA]
?selectNA
library(caret)
?selectNA
library(kernlab)
library(caret)
data(spam)
M <- abs(cor(Wage[,-58]))
M <- abs(cor(Wage))
str(Wage
)
cor(Wage)
cor(Wage[,-58])
cor(Wage[,-5])
InTrain <- createDataPartition((y=spam$type,p=.75,list=F))
InTrain <- createDataPartition((y=spam$type,p=.75,list=FALSE))
InTrain <- createDataPartition(y=spam$type,p=.75,list=FALSE))
InTrain <- createDataPartition(y=spam$type,p=.75,list=FALSE)
training <- spa,[Intrain,]
training <- spam[Intrain,]
training <- spam[InTrain,]
str(training
)
str(training[,-58)
str(training[,-58])
M
cor(training[,-58])
m <- abs(cor(training[,-58]))
diag(m)
plot(spam[,34],spam[,32])
data("faithful")
data(faithful)
intrain <- createDataPartition(y=faithful$waiting,p=.5,list=FALSE)
trainfaith <- faithful[intrain,]
testfaith <- faithful[-intrain,]
head(trainfaith)
head(testfaith)
plot(trainfaith$waiting,testfaith$waiting)
head(trainfaith)
head(testfaith)
plot(trainfaith$waiting,testfaith$waiting)
length(testfaith)
length(testfaith$waiting)
length(trainfaith$waiting)
trainfaith <- trainfaith[-136:137,]
trainfaith <- trainfaith[-(136:137),]
plot(trainfaith$waiting,testfaith$waiting)
plot(trainfaith$waiting,testfaith$waiting,pch=19,col='blue')
lm1 <- lm(eruptions ~ waiting,data=trainfaith)
plot(lm1)
summary(lm1)
plot(trainfaith$waiting,testfaith$waiting,pch=19,col='blue')
lines(trainfaith$waiting,lm1$gitted
)
plot(trainfaith$waiting,testfaith$eruptions,pch=19,col='blue')
lines(trainfaith$waiting,lm1$gitted
)
lines(trainfaith$waiting,lm1$fitted
)
coef(lm1)[1]
coef(lm1)[2]
newdata <- data.frame(waiting=0)
predict(lm1,newdata)
plot(testfaith$waiting,testfaith$eruptions,pch=19,col='blue')
plot(trainfaith$waiting,rainfaith$eruptions,pch=19,col='blue')
plot(trainfaith$waiting,trainfaith$eruptions,pch=19,col='blue')
sqrt(sum(lm1$fitted - trainfaith$eruptions)^2))
sqrt(sum((lm1$fitted - trainfaith$eruptions)^2))
sqrt(sum((predict(lm1,newdata=testFaith) - trainfaith$eruptions)^2))
sqrt(sum((predict(lm1,newdata=testfaith) - trainfaith$eruptions)^2))
sqrt(sum((predict(lm1,newdata=testfaith) - testfaith$eruptions)^2))
pred1 <- predict(lm1,newdata-testfaith,interval='prediction')
pred1 <- predict(lm1,newdata=testfaith,interval='prediction')
ord <- order(testfaith$waiting)
plot(testfaith$waiting,testfaith$erupt,pch=19)
str(wage)
str(Wage)
pairs(Wage)
qplot(age,wage,data=Wage)
qplot(age,wage,data=Wage,color=jobclass)
qplot(age,wage,data=Wage,color=education)
fit1 <- train(wage ~ age + jobclass + education,method='lm',data-Wage)
fit1 <- train(wage ~ age,data-Wage)
fit1 <- train(wage ~ age + jobclass + education,method='lm',data=Wage)
print(fit1$finalModel)
plot(fit1$finalModel)
qplot(fit$fitted,fit$residuals)
qplot(fit1$fitted,fit1$residuals)
qplot(fit1$finalModel$fitted,fit1$finalModel$residuals)
qplot(wage,predict(fit1$finalModel,wage)
)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages('AppliedPredictiveModeling')
data(AlzheimerDisease)
install.packages('AppliedPredictiveModeling')
data(AlzheimerDisease)
library(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
str(diagnosis)
str(predictors)
dim(predictors)
dim(diagnosis)
str(diagnosis)
length(diagnosis)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(CompressiveStrength)
qplot(CompressiveStrength,data=concrete)
str(concrete)
qplot(y=CompressiveStrength,data=concrete)
qplot(y=CompressiveStrength,data=concrete,col=factor9(FlyAsh))
qplot(y=CompressiveStrength,data=concrete,col=factor(FlyAsh))
fA <- cut2(concrete$FlyAsh,g=4)
qplot(y=CompressiveStrength,data=concrete,col=factor(fA))
fAge <- cut2(concrete$Age,g=4)
fAsh <- cut2(concrete$FlyAsh,g=4)
fWat <- cut2(concrete$Water,g=4)
ffine <- cut2(concrete$FineAggregate,g=4)
qplot(y=CompressiveStrength,data=concrete,col=factor(fAage))
qplot(y=CompressiveStrength,data=concrete,col=factor(fAge))
qplot(y=CompressiveStrength,data=concrete,col=factor(fAge),x=0)
qplot(y=CompressiveStrength,data=concrete,col=factor(fAge),x=1)
qplot(y=CompressiveStrength,data=concrete,col=factor(fAge))
qplot(y=CompressiveStrength,data=concrete))
qplot(y=CompressiveStrength,data=concrete)
qplot(y=CompressiveStrength,data=concrete,col=factor(fAsh))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,
]
qplot(SuperPlasticizer,data=concreta)
qplot(SuperPlasticizer,data=concrete)
qplot(SuperPlasticizer,data=concrete)
str(concrete)
qplot(Superplasticizer,data=concrete)
qplot(log(Superplasticizer),data=concrete)
qplot(log(Superplasticizer+1),data=concrete)
range(Superplasticizer,data=concrete)
range(concrete$Superplasticizer)
min(concrete$Superplasticizer)
quantile(concrete$Superplasticizer)
qplot(log(Superplasticizer+1),data=concrete,geom=c('boxplot'))
qplot(y=log(Superplasticizer+1),data=concrete,geom=c('boxplot'))
qplot(y=log(Superplasticizer+1),data=concrete,geom=c('boxplot'),x=0)
qplot(y=Superplasticizer,data=concrete,geom=c('boxplot'),x=0)
sum(concrete$Superplasticizer == 0)
dim(concrete)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
grep(names(training),'IL'
)
?grep1
?grep
?gsun
grep('IL',names(training))
str(training[,58])
head(training[,58])
str(training)
x <- grep('IL',names(training))
preProcess(training[,-x], method='PCA'
)
preProcess(training[,-x], method='pca')
sum(x)
length(x)
gsub('IL','ILGH'
)
x <- grep('IL','ILkdkld')
x
x <- grep('IL',c('ILkdkld','IL')
)
x
x <- grep('IL',c('ILkdkld','IKL','ILs')
)
x
x <- grep('IL',names(training))
x
dim(x)
count(x)
unique(x)
len(x)
length(x)
preProcess(training[,-x], method='pca',pcaComp=13)
preProcess(training, method='pca',pcaComp=13)
preProcess(training, method='pca')
dim(training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training1 <- training[,-x]
str(training1)
str(training)
training$diagnosis
training1 <- training[,c(x,'diagnosis']
training1 <- training[,c(x:'diagnosis']
training1 <- training[,c(x,'diagnosis')]
training1 <- training[,c(x,diagnosis)]
str(training1)
training1 <- training[,x]
str(training1)
typeCOlor <- ((spam$type=='spam')*1 + 1)
typeCOlor
prCOmp <- prcoomp(log10(spam[,-58]+1))
prCOmp <- prcomp(log10(spam[,-58]+1))
prcomp
summary(prcomp)
rm()
library(caret)
prcomp
prCOmp <- prcomp(log10(spam[,-58]+1))
library(caret)
prCOmp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1])
head(prCOmp)
plot(prComp$x[,1])
plot(prComp$x[,1],prComp$x[,2])
str(prComp)
head(prCOmp)
head(prCOmp,1)
names(prCOmp)
plot(prComp$x)
plot(prComp
)
shiny::runApp('C:/Users/lakha/Desktop/shinyapp')
install.packages('rpart.plot')
install.packages("rpart.plot")
shiny::runApp('C:/Users/lakha/Desktop/shinyapp')
library("rpart.plot", lib.loc="~/R/win-library/3.4")
remove.packages("rpart.plot", lib="~/R/win-library/3.4")
library(rpart.plot)
runApp('C:/Users/lakha/Desktop/shinyapp')
runApp('C:/Users/lakha/Desktop/shinyapp')
runApp('C:/Users/lakha/Desktop/shinyapp')
install.package('rpart.plot')
install.packages('rpart.plot')
install.packages("rpart.plot")
shiny::runApp('C:/Users/lakha/Desktop/shinyapp')
knitr::opts_chunk$set(echo = TRUE,message=FALSE,warning=FALSE)
library(caret)
library(rpart.plot)
library(rattle)
data(iris)
fit <- train (Species ~.,data=iris,method='rpart')
userInput <- data.frame(4.5,2.0,4.3,2.5)
names(userInput)<-c("Sepal.Width","Petal.Length", "Petal.Width","Sepal.Length")
predict(fit,newdata=userInput)
fancyRpartPlot(fit$finalModel)
runApp('C:/Users/lakha/Desktop/shinyapp')
